import { DOCUMENT } from '@angular/common';
import { Injectable, Inject, Optional } from '@angular/core';
import { defer } from 'rxjs';
import { shareReplay } from 'rxjs/operators';
import { defaultModules } from './quill-defaults';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
import * as i0 from "@angular/core";
export class QuillService {
    constructor(injector, config) {
        this.config = config;
        this.quill$ = defer(async () => {
            // Quill adds events listeners on import https://github.com/quilljs/quill/blob/develop/core/emitter.js#L8
            // We'd want to use the unpatched `addEventListener` method to have all event callbacks to be run outside of zone.
            // We don't know yet if the `zone.js` is used or not, just save the value to restore it back further.
            const maybePatchedAddEventListener = this.document.addEventListener;
            // There're 2 types of Angular applications:
            // 1) zone-full (by default)
            // 2) zone-less
            // The developer can avoid importing the `zone.js` package and tells Angular that he/she is responsible for running
            // the change detection by himself. This is done by "nooping" the zone through `CompilerOptions` when bootstrapping
            // the root module. We fallback to `document.addEventListener` if `__zone_symbol__addEventListener` is not defined,
            // this means the `zone.js` is not imported.
            // The `__zone_symbol__addEventListener` is basically a native DOM API, which is not patched by zone.js, thus not even going
            // through the `zone.js` task lifecycle. You can also access the native DOM API as follows `target[Zone.__symbol__('methodName')]`.
            // eslint-disable-next-line @typescript-eslint/dot-notation
            this.document.addEventListener = this.document['__zone_symbol__addEventListener'] || this.document.addEventListener;
            const quillImport = await import('quill');
            this.document.addEventListener = maybePatchedAddEventListener;
            this.Quill = (quillImport.default ? quillImport.default : quillImport);
            // Only register custom options and modules once
            this.config.customOptions?.forEach((customOption) => {
                const newCustomOption = this.Quill.import(customOption.import);
                newCustomOption.whitelist = customOption.whitelist;
                this.Quill.register(newCustomOption, true, this.config.suppressGlobalRegisterWarning);
            });
            this.config.customModules?.forEach(({ implementation, path }) => {
                this.Quill.register(path, implementation, this.config.suppressGlobalRegisterWarning);
            });
            return this.Quill;
        }).pipe(shareReplay({ bufferSize: 1, refCount: true }));
        this.document = injector.get(DOCUMENT);
        if (!this.config) {
            this.config = { modules: defaultModules };
        }
    }
    getQuill() {
        return this.quill$;
    }
}
QuillService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: QuillService, deps: [{ token: i0.Injector }, { token: QUILL_CONFIG_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
QuillService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: QuillService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: QuillService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [QUILL_CONFIG_TOKEN]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1xdWlsbC9zcmMvbGliL3F1aWxsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFZLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUN0RSxPQUFPLEVBQUUsS0FBSyxFQUFjLE1BQU0sTUFBTSxDQUFBO0FBQ3hDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUU1QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDakQsT0FBTyxFQUFFLGtCQUFrQixFQUFlLE1BQU0sMkJBQTJCLENBQUE7O0FBSzNFLE1BQU0sT0FBTyxZQUFZO0lBaUR2QixZQUNFLFFBQWtCLEVBQzZCLE1BQW1CO1FBQW5CLFdBQU0sR0FBTixNQUFNLENBQWE7UUEvQzVELFdBQU0sR0FBb0IsS0FBSyxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQ2pELHlHQUF5RztZQUN6RyxrSEFBa0g7WUFDbEgscUdBQXFHO1lBQ3JHLE1BQU0sNEJBQTRCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQTtZQUNuRSw0Q0FBNEM7WUFDNUMsNEJBQTRCO1lBQzVCLGVBQWU7WUFDZixtSEFBbUg7WUFDbkgsbUhBQW1IO1lBQ25ILG1IQUFtSDtZQUNuSCw0Q0FBNEM7WUFDNUMsNEhBQTRIO1lBQzVILG1JQUFtSTtZQUNuSSwyREFBMkQ7WUFDM0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGlDQUFpQyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQTtZQUNuSCxNQUFNLFdBQVcsR0FBRyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUN6QyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixHQUFHLDRCQUE0QixDQUFBO1lBRTdELElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FDWCxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQ2pELENBQUE7WUFFUixnREFBZ0Q7WUFDaEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQUU7Z0JBQ2xELE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQTtnQkFDOUQsZUFBZSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFBO2dCQUNsRCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FDakIsZUFBZSxFQUNmLElBQUksRUFDSixJQUFJLENBQUMsTUFBTSxDQUFDLDZCQUE2QixDQUMxQyxDQUFBO1lBQ0gsQ0FBQyxDQUFDLENBQUE7WUFFRixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO2dCQUM5RCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FDakIsSUFBSSxFQUNKLGNBQWMsRUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLDZCQUE2QixDQUMxQyxDQUFBO1lBQ0gsQ0FBQyxDQUFDLENBQUE7WUFFRixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7UUFDbkIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtRQU1yRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUE7UUFFdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsQ0FBQTtTQUMxQztJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFBO0lBQ3BCLENBQUM7O3lHQTlEVSxZQUFZLDBDQW1ERCxrQkFBa0I7NkdBbkQ3QixZQUFZLGNBRlgsTUFBTTsyRkFFUCxZQUFZO2tCQUh4QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7MEJBb0RJLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIEluamVjdG9yLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXG5pbXBvcnQgeyBkZWZlciwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnXG5pbXBvcnQgeyBzaGFyZVJlcGxheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJ1xuXG5pbXBvcnQgeyBkZWZhdWx0TW9kdWxlcyB9IGZyb20gJy4vcXVpbGwtZGVmYXVsdHMnXG5pbXBvcnQgeyBRVUlMTF9DT05GSUdfVE9LRU4sIFF1aWxsQ29uZmlnIH0gZnJvbSAnLi9xdWlsbC1lZGl0b3IuaW50ZXJmYWNlcydcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFF1aWxsU2VydmljZSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbiAgcHJpdmF0ZSBRdWlsbCE6IGFueVxuICBwcml2YXRlIGRvY3VtZW50OiBEb2N1bWVudFxuICBwcml2YXRlIHF1aWxsJDogT2JzZXJ2YWJsZTxhbnk+ID0gZGVmZXIoYXN5bmMgKCkgPT4ge1xuICAgIC8vIFF1aWxsIGFkZHMgZXZlbnRzIGxpc3RlbmVycyBvbiBpbXBvcnQgaHR0cHM6Ly9naXRodWIuY29tL3F1aWxsanMvcXVpbGwvYmxvYi9kZXZlbG9wL2NvcmUvZW1pdHRlci5qcyNMOFxuICAgIC8vIFdlJ2Qgd2FudCB0byB1c2UgdGhlIHVucGF0Y2hlZCBgYWRkRXZlbnRMaXN0ZW5lcmAgbWV0aG9kIHRvIGhhdmUgYWxsIGV2ZW50IGNhbGxiYWNrcyB0byBiZSBydW4gb3V0c2lkZSBvZiB6b25lLlxuICAgIC8vIFdlIGRvbid0IGtub3cgeWV0IGlmIHRoZSBgem9uZS5qc2AgaXMgdXNlZCBvciBub3QsIGp1c3Qgc2F2ZSB0aGUgdmFsdWUgdG8gcmVzdG9yZSBpdCBiYWNrIGZ1cnRoZXIuXG4gICAgY29uc3QgbWF5YmVQYXRjaGVkQWRkRXZlbnRMaXN0ZW5lciA9IHRoaXMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lclxuICAgIC8vIFRoZXJlJ3JlIDIgdHlwZXMgb2YgQW5ndWxhciBhcHBsaWNhdGlvbnM6XG4gICAgLy8gMSkgem9uZS1mdWxsIChieSBkZWZhdWx0KVxuICAgIC8vIDIpIHpvbmUtbGVzc1xuICAgIC8vIFRoZSBkZXZlbG9wZXIgY2FuIGF2b2lkIGltcG9ydGluZyB0aGUgYHpvbmUuanNgIHBhY2thZ2UgYW5kIHRlbGxzIEFuZ3VsYXIgdGhhdCBoZS9zaGUgaXMgcmVzcG9uc2libGUgZm9yIHJ1bm5pbmdcbiAgICAvLyB0aGUgY2hhbmdlIGRldGVjdGlvbiBieSBoaW1zZWxmLiBUaGlzIGlzIGRvbmUgYnkgXCJub29waW5nXCIgdGhlIHpvbmUgdGhyb3VnaCBgQ29tcGlsZXJPcHRpb25zYCB3aGVuIGJvb3RzdHJhcHBpbmdcbiAgICAvLyB0aGUgcm9vdCBtb2R1bGUuIFdlIGZhbGxiYWNrIHRvIGBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyYCBpZiBgX196b25lX3N5bWJvbF9fYWRkRXZlbnRMaXN0ZW5lcmAgaXMgbm90IGRlZmluZWQsXG4gICAgLy8gdGhpcyBtZWFucyB0aGUgYHpvbmUuanNgIGlzIG5vdCBpbXBvcnRlZC5cbiAgICAvLyBUaGUgYF9fem9uZV9zeW1ib2xfX2FkZEV2ZW50TGlzdGVuZXJgIGlzIGJhc2ljYWxseSBhIG5hdGl2ZSBET00gQVBJLCB3aGljaCBpcyBub3QgcGF0Y2hlZCBieSB6b25lLmpzLCB0aHVzIG5vdCBldmVuIGdvaW5nXG4gICAgLy8gdGhyb3VnaCB0aGUgYHpvbmUuanNgIHRhc2sgbGlmZWN5Y2xlLiBZb3UgY2FuIGFsc28gYWNjZXNzIHRoZSBuYXRpdmUgRE9NIEFQSSBhcyBmb2xsb3dzIGB0YXJnZXRbWm9uZS5fX3N5bWJvbF9fKCdtZXRob2ROYW1lJyldYC5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2RvdC1ub3RhdGlvblxuICAgIHRoaXMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciA9IHRoaXMuZG9jdW1lbnRbJ19fem9uZV9zeW1ib2xfX2FkZEV2ZW50TGlzdGVuZXInXSB8fCB0aGlzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXJcbiAgICBjb25zdCBxdWlsbEltcG9ydCA9IGF3YWl0IGltcG9ydCgncXVpbGwnKVxuICAgIHRoaXMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciA9IG1heWJlUGF0Y2hlZEFkZEV2ZW50TGlzdGVuZXJcblxuICAgIHRoaXMuUXVpbGwgPSAoXG4gICAgICBxdWlsbEltcG9ydC5kZWZhdWx0ID8gcXVpbGxJbXBvcnQuZGVmYXVsdCA6IHF1aWxsSW1wb3J0XG4gICAgKSBhcyBhbnlcblxuICAgIC8vIE9ubHkgcmVnaXN0ZXIgY3VzdG9tIG9wdGlvbnMgYW5kIG1vZHVsZXMgb25jZVxuICAgIHRoaXMuY29uZmlnLmN1c3RvbU9wdGlvbnM/LmZvckVhY2goKGN1c3RvbU9wdGlvbikgPT4ge1xuICAgICAgY29uc3QgbmV3Q3VzdG9tT3B0aW9uID0gdGhpcy5RdWlsbC5pbXBvcnQoY3VzdG9tT3B0aW9uLmltcG9ydClcbiAgICAgIG5ld0N1c3RvbU9wdGlvbi53aGl0ZWxpc3QgPSBjdXN0b21PcHRpb24ud2hpdGVsaXN0XG4gICAgICB0aGlzLlF1aWxsLnJlZ2lzdGVyKFxuICAgICAgICBuZXdDdXN0b21PcHRpb24sXG4gICAgICAgIHRydWUsXG4gICAgICAgIHRoaXMuY29uZmlnLnN1cHByZXNzR2xvYmFsUmVnaXN0ZXJXYXJuaW5nXG4gICAgICApXG4gICAgfSlcblxuICAgIHRoaXMuY29uZmlnLmN1c3RvbU1vZHVsZXM/LmZvckVhY2goKHsgaW1wbGVtZW50YXRpb24sIHBhdGggfSkgPT4ge1xuICAgICAgdGhpcy5RdWlsbC5yZWdpc3RlcihcbiAgICAgICAgcGF0aCxcbiAgICAgICAgaW1wbGVtZW50YXRpb24sXG4gICAgICAgIHRoaXMuY29uZmlnLnN1cHByZXNzR2xvYmFsUmVnaXN0ZXJXYXJuaW5nXG4gICAgICApXG4gICAgfSlcblxuICAgIHJldHVybiB0aGlzLlF1aWxsXG4gIH0pLnBpcGUoc2hhcmVSZXBsYXkoeyBidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZSB9KSlcblxuICBjb25zdHJ1Y3RvcihcbiAgICBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChRVUlMTF9DT05GSUdfVE9LRU4pIHB1YmxpYyBjb25maWc6IFF1aWxsQ29uZmlnXG4gICkge1xuICAgIHRoaXMuZG9jdW1lbnQgPSBpbmplY3Rvci5nZXQoRE9DVU1FTlQpXG5cbiAgICBpZiAoIXRoaXMuY29uZmlnKSB7XG4gICAgICB0aGlzLmNvbmZpZyA9IHsgbW9kdWxlczogZGVmYXVsdE1vZHVsZXMgfVxuICAgIH1cbiAgfVxuXG4gIGdldFF1aWxsKCkge1xuICAgIHJldHVybiB0aGlzLnF1aWxsJFxuICB9XG59XG4iXX0=